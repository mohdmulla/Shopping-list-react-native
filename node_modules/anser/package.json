{
  "_args": [
    [
      {
        "raw": "anser@^1.4.9",
        "scope": null,
        "escapedName": "anser",
        "name": "anser",
        "rawSpec": "^1.4.9",
        "spec": ">=1.4.9 <2.0.0",
        "type": "range"
      },
      "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/react-native"
    ]
  ],
  "_from": "anser@^1.4.9",
  "_hasShrinkwrap": false,
  "_id": "anser@1.4.10",
  "_location": "/anser",
  "_nodeVersion": "12.16.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/anser_1.4.10_1596965046866_0.823101536879282"
  },
  "_npmUser": {
    "name": "ionicabizau",
    "email": "bizauionica@gmail.com"
  },
  "_npmVersion": "6.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "anser@^1.4.9",
    "scope": null,
    "escapedName": "anser",
    "name": "anser",
    "rawSpec": "^1.4.9",
    "spec": ">=1.4.9 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-native"
  ],
  "_resolved": "https://registry.npmjs.org/anser/-/anser-1.4.10.tgz",
  "_shasum": "befa3eddf282684bd03b63dcda3927aef8c2e35b",
  "_shrinkwrap": null,
  "_spec": "anser@^1.4.9",
  "_where": "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/react-native",
  "author": {
    "name": "Ionică Bizău",
    "email": "bizauionica@gmail.com",
    "url": "https://ionicabizau.net"
  },
  "blah": {
    "description": [
      {
        "h2": ":rocket: Features"
      },
      {
        "ul": [
          "Converts text containing [ANSI color escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors) into equivalent HTML elements.",
          "Allows converting the input into JSON output.",
          "HTML escaping",
          "Converts links into HTML elements",
          "Friendly APIs to use with  virtual dom libraries"
        ]
      }
    ],
    "example": [
      "When using **TypeScript** you can do the following:",
      {
        "code": {
          "content": [
            "import * as Anser from 'anser';",
            "const txt = \"\\u001b[38;5;196mHello\\u001b[39m \\u001b[48;5;226mWorld\\u001b[49m\";",
            "console.log(Anser.ansiToHtml(txt));",
            "// <span style=\"color:rgb(255, 0, 0)\">Hello</span> <span style=\"background-color:rgb(255, 255, 0)\">World</span>"
          ],
          "language": "ts"
        }
      }
    ],
    "thanks": "This project is highly based on [`ansi_up`](https://github.com/drudru/ansi_up), by [@drudru](https://github.com/drudru/). Thanks! :cake:"
  },
  "bugs": {
    "url": "http://github.com/IonicaBizau/anser/issues"
  },
  "dependencies": {},
  "description": "A low level parser for ANSI sequences.",
  "devDependencies": {
    "jshint": "*",
    "jslint": "*",
    "mocha": "*",
    "should": "*"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-hCv9AqTQ8ycjpSd3upOJd7vFwW1JaoYQ7tpham03GJ1ca8/65rqn0RpaWpItOAd6ylW9wAw6luXYPJIyPFVOww==",
    "shasum": "befa3eddf282684bd03b63dcda3927aef8c2e35b",
    "tarball": "https://registry.npmjs.org/anser/-/anser-1.4.10.tgz",
    "fileCount": 5,
    "unpackedSize": 45952,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfL8C3CRA9TVsSAnZWagAA5dsP/2RBFCX9NPhMjfmW8uGW\nD4z1brGiBb4ZnMXJB8gSnRMe7ymDGw2GMj5YiKYhjNrg7y7K5ZgmUk3CKw99\nJZv1nQh9Js8ziN3Uw1ESp1TsvRhmWxEo8/iwOpBtZiPiqaWF5nlcncJMSzjk\nj/8S8OtTWXXdtFY2uBij5jhMpgZcgnpNupaQG0QszUlXFwijf1qWA1DSqc1A\naZaYZWVJ5QqZE97dqY2SRKE7d2XcuhVXFCQgQr37nnibk7b6CGGGDwmXJOOl\nKZy7pZiDpcVh+JTPkxcMdLbbGGRj50GRWoDsUdO2Eq4QYolXeUhDo8mKaELv\nTOFEnFmlbMBUbMbLoZXVbX7sKZXuiGRUIbtOaBlgex28zKp43LJcDwRrcNFf\nGB/3ThQbBxWDWER2wRks2k19les5bx86yM9Hy+s921FzHrjvE5WZje4KGfUB\nwxyoVG159OLXmbBoWbB3nqdzK3bAbnrxpodB3gNV9pNkS7yDZpI6UdHYLH4q\n4+DBBGg6TYBJrDSb5dtcPt9V0EbKkiuUwv+vJeJAUuWOgkFLrrrEcpRirBcB\nkDG4bdtqPA70oDtdGeCVGrJs73ZF6yaD3erkyqtCxZiqUamFAPE+u5mjhtAK\nk4EHNL6eo78uY8O7xn0lynpDA8Fy0gXez0v9deCK/Byukf64Dt2IwEjOBfzp\nnVLZ\r\n=u8za\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "bin/",
    "app/",
    "lib/",
    "dist/",
    "src/",
    "scripts/",
    "resources/",
    "menu/",
    "cli.js",
    "index.js",
    "bloggify.js",
    "bloggify.json",
    "bloggify/"
  ],
  "gitHead": "b77b804053ab3549b31910d5e00586849c9d8eb0",
  "homepage": "https://github.com/IonicaBizau/anser#readme",
  "keywords": [
    "ansi",
    "html"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "ionicabizau",
      "email": "bizauionica@gmail.com"
    }
  ],
  "name": "anser",
  "optionalDependencies": {},
  "readme": "<!-- Please do not edit this file. Edit the `blah` field in the `package.json` instead. If in doubt, open an issue. -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# anser\n\n [![Support me on Patreon][badge_patreon]][patreon] [![Buy me a book][badge_amazon]][amazon] [![PayPal][badge_paypal_donate]][paypal-donations] [![Ask me anything](https://img.shields.io/badge/ask%20me-anything-1abc9c.svg)](https://github.com/IonicaBizau/ama) [![Travis](https://img.shields.io/travis/IonicaBizau/anser.svg)](https://travis-ci.org/IonicaBizau/anser/) [![Version](https://img.shields.io/npm/v/anser.svg)](https://www.npmjs.com/package/anser) [![Downloads](https://img.shields.io/npm/dt/anser.svg)](https://www.npmjs.com/package/anser) [![Get help on Codementor](https://cdn.codementor.io/badges/get_help_github.svg)](https://www.codementor.io/johnnyb?utm_source=github&utm_medium=button&utm_term=johnnyb&utm_campaign=github)\n\n<a href=\"https://www.buymeacoffee.com/H96WwChMy\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/yellow_img.png\" alt=\"Buy Me A Coffee\"></a>\n\n\n\n\n\n\n\n> A low level parser for ANSI sequences.\n\n\n\n\n\n\n## :rocket: Features\n\n\n - Converts text containing [ANSI color escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors) into equivalent HTML elements.\n - Allows converting the input into JSON output.\n - HTML escaping\n - Converts links into HTML elements\n - Friendly APIs to use with  virtual dom libraries\n\n\n\n\n\n\n\n\n\n\n\n\n\n## :cloud: Installation\n\n```sh\n# Using npm\nnpm install --save anser\n\n# Using yarn\nyarn add anser\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## :clipboard: Example\n\n\n\n```js\nconst Anser = require(\"anser\");\n\nconst txt = \"\\u001b[38;5;196mHello\\u001b[39m \\u001b[48;5;226mWorld\\u001b[49m\";\n\nconsole.log(Anser.ansiToHtml(txt));\n// <span style=\"color:rgb(255, 0, 0)\">Hello</span> <span style=\"background-color:rgb(255, 255, 0)\">World</span>\n\nconsole.log(Anser.ansiToHtml(txt, { use_classes: true }));\n// <span class=\"ansi-palette-196-fg\">Hello</span> <span class=\"ansi-palette-226-bg\">World</span>\n\nconsole.log(Anser.ansiToJson(txt));\n// [ { content: '',\n//     fg: null,\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: undefined,\n//     decoration: null,\n//     was_processed: false,\n//     isEmpty: [Function: isEmpty] },\n//   { content: 'Hello',\n//     fg: '255, 0, 0',\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: true,\n//     isEmpty: [Function: isEmpty] },\n//   { content: ' ',\n//     fg: null,\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: false,\n//     isEmpty: [Function: isEmpty] },\n//   { content: 'World',\n//     fg: null,\n//     bg: '255, 255, 0',\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: true,\n//     isEmpty: [Function: isEmpty] },\n//   { content: '',\n//     fg: null,\n//     bg: null,\n//     fg_truecolor: null,\n//     bg_truecolor: null,\n//     clearLine: false,\n//     decoration: null,\n//     was_processed: false,\n//     isEmpty: [Function: isEmpty] } ]\n```\n\n\n\n\n\n\nWhen using **TypeScript** you can do the following:\n```ts\nimport * as Anser from 'anser';\nconst txt = \"\\u001b[38;5;196mHello\\u001b[39m \\u001b[48;5;226mWorld\\u001b[49m\";\nconsole.log(Anser.ansiToHtml(txt));\n// <span style=\"color:rgb(255, 0, 0)\">Hello</span> <span style=\"background-color:rgb(255, 255, 0)\">World</span>\n```\n\n\n\n\n\n\n\n## :question: Get Help\n\nThere are few ways to get help:\n\n\n\n 1. Please [post questions on Stack Overflow](https://stackoverflow.com/questions/ask). You can open issues with questions, as long you add a link to your Stack Overflow question.\n 2. For bug reports and feature requests, open issues. :bug:\n 3. For direct and quick help, you can [use Codementor](https://www.codementor.io/johnnyb). :rocket:\n\n\n\n\n\n## :memo: Documentation\n\n\n### `Anser.escapeForHtml(txt)`\nEscape the input HTML.\n\nThis does the minimum escaping of text to make it compliant with HTML.\nIn particular, the '&','<', and '>' characters are escaped. This should\nbe run prior to `ansiToHtml`.\n\n#### Params\n\n- **String** `txt`: The input text (containing the ANSI snippets).\n\n#### Return\n- **String** The escaped html.\n\n### `Anser.linkify(txt)`\nAdds the links in the HTML.\n\nThis replaces any links in the text with anchor tags that display the\nlink. The links should have at least one whitespace character\nsurrounding it. Also, you should apply this after you have run\n`ansiToHtml` on the text.\n\n#### Params\n\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The HTML containing the <a> tags (unescaped).\n\n### `Anser.ansiToHtml(txt, options)`\nThis replaces ANSI terminal escape codes with SPAN tags that wrap the\ncontent.\n\nThis function only interprets ANSI SGR (Select Graphic Rendition) codes\nthat can be represented in HTML.\nFor example, cursor movement codes are ignored and hidden from output.\nThe default style uses colors that are very close to the prescribed\nstandard. The standard assumes that the text will have a black\nbackground. These colors are set as inline styles on the SPAN tags.\n\nAnother option is to set `use_classes: true` in the options argument.\nThis will instead set classes on the spans so the colors can be set via\nCSS. The class names used are of the format `ansi-*-fg/bg` and\n`ansi-bright-*-fg/bg` where `*` is the color name,\ni.e black/red/green/yellow/blue/magenta/cyan/white.\n\n#### Params\n\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed to the ansiToHTML method.\n\n#### Return\n- **String** The HTML output.\n\n### `Anser.ansiToJson(txt, options)`\nConverts ANSI input into JSON output.\n\n#### Params\n\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed to the ansiToHTML method.\n\n#### Return\n- **String** The HTML output.\n\n### `Anser.ansiToText(txt)`\nConverts ANSI input into text output.\n\n#### Params\n\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The text output.\n\n### `Anser()`\nThe `Anser` class.\n\n#### Return\n- **Anser**\n\n### `setupPalette()`\nSets up the palette.\n\n### `escapeForHtml(txt)`\nEscapes the input text.\n\n#### Params\n\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The escpaed HTML output.\n\n### `linkify(txt)`\nAdds HTML link elements.\n\n#### Params\n\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The HTML output containing link elements.\n\n### `ansiToHtml(txt, options)`\nConverts ANSI input into HTML output.\n\n#### Params\n\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed ot the `process` method.\n\n#### Return\n- **String** The HTML output.\n\n### `ansiToJson(txt, options)`\nConverts ANSI input into HTML output.\n\n#### Params\n\n- **String** `txt`: The input text.\n- **Object** `options`: The options passed ot the `process` method.\n\n#### Return\n- **String** The JSON output.\n\n### `ansiToText(txt)`\nConverts ANSI input into HTML output.\n\n#### Params\n\n- **String** `txt`: The input text.\n\n#### Return\n- **String** The text output.\n\n### `process(txt, options, markup)`\nProcesses the input.\n\n#### Params\n\n- **String** `txt`: The input text.\n- **Object** `options`: An object passed to `processChunk` method, extended with:\n - `json` (Boolean): If `true`, the result will be an object.\n - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n- **Boolean** `markup`:\n\n### `processChunkJson(text, options, markup)`\nProcesses the current chunk into json output.\n\n#### Params\n\n- **String** `text`: The input text.\n- **Object** `options`: An object containing the following fields:\n - `json` (Boolean): If `true`, the result will be an object.\n - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n- **Boolean** `markup`: If false, the colors will not be parsed.\n\n#### Return\n- **Object** The result object:\n - `content` (String): The text.\n - `fg` (String|null): The foreground color.\n - `bg` (String|null): The background color.\n - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).\n - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).\n - `clearLine` (Boolean): `true` if a carriageReturn \\r was fount at end of line.\n - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.\n - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.\n\n### `processChunk(text, options, markup)`\nProcesses the current chunk of text.\n\n#### Params\n\n- **String** `text`: The input text.\n- **Object** `options`: An object containing the following fields:\n - `json` (Boolean): If `true`, the result will be an object.\n - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n- **Boolean** `markup`: If false, the colors will not be parsed.\n\n#### Return\n- **Object|String** The result (object if `json` is wanted back or string otherwise).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## :yum: How to contribute\nHave an idea? Found a bug? See [how to contribute][contributing].\n\n\n## :sparkling_heart: Support my projects\nI open-source almost everything I can, and I try to reply to everyone needing help using these projects. Obviously,\nthis takes time. You can integrate and use these projects in your applications *for free*! You can even change the source code and redistribute (even resell it).\n\nHowever, if you get some profit from this or just want to encourage me to continue creating stuff, there are few ways you can do it:\n\n\n - Starring and sharing the projects you like :rocket:\n - [![Buy me a book][badge_amazon]][amazon]—I love books! I will remember you after years if you buy me one. :grin: :book:\n - [![PayPal][badge_paypal]][paypal-donations]—You can make one-time donations via PayPal. I'll probably buy a ~~coffee~~ tea. :tea:\n - [![Support me on Patreon][badge_patreon]][patreon]—Set up a recurring monthly donation and you will get interesting news about what I'm doing (things that I don't share with everyone).\n - **Bitcoin**—You can send me bitcoins at this address (or scanning the code below): `1P9BRsmazNQcuyTxEqveUsnf5CERdq35V6`\n\n    ![](https://i.imgur.com/z6OQI95.png)\n\n\nThanks! :heart:\n\n\n\n\n\n\n\n\n\n## :cake: Thanks\nThis project is highly based on [`ansi_up`](https://github.com/drudru/ansi_up), by [@drudru](https://github.com/drudru/). Thanks! :cake:\n\n\n\n\n\n\n\n\n## :dizzy: Where is this library used?\nIf you are using this library in one of your projects, add it in this list. :sparkles:\n\n - `react-native`\n - `ansi-to-react`\n - `mesh-devtool`\n - `nuclide-commons-ui`\n - `@next/react-dev-overlay`\n - `transformime`\n - `@viankakrisna/react-dev-utils`\n - `react-webpack-build-helper`\n - `redux-devtools-trace-monitor`\n - `timer-react-dev-utils`\n - `react-dev-utils-extra`\n - `ansi-html-themed`\n - `uyun-react-dev-utils`\n - `react-dev-utils-sebfl-update`\n - `@jjavery/react-error-overlay`\n - `lambda-dev-utils`\n - `react-error-overlay-canary`\n - `@axio/react-dev-utils`\n - `react-error-overlay-dangerous`\n - `@classflow/react-dev-utils`\n - `ansi-to-json`\n - `nuclide`\n - `react-native-okhttp-fork`\n - `@devpodio/console`\n - `ipynb2html`\n - `webpack-isomorphic-dev-middleware`\n - `@theia/console`\n - `stack-frame-overlay`\n - `cycle-dev-utils`\n - `@viankakrisna/react-error-overlay`\n - `callstack-task-react-error-overlay`\n - `callstack-task-react-dev-utils`\n - `ansi-to-react-with-options`\n - `@plansys/react-dev-utils`\n - `zc-react-dev-utils`\n - `@ehyland-org/react-error-overlay`\n - `react-dev-utils-custom-hmr`\n - `ansi-to-react-with-classes`\n - `linklog`\n - `@naze/error`\n - `react-error-guard`\n - `singularityui-tailer`\n - `@unforgiven/react-native`\n - `react-ansi`\n - `@digibear/socket-bridge`\n - `ada-pack`\n - `react-native-hlf-wrapper`\n - `webpack-universal-compiler`\n - `@prague-digi/react-error-overlay`\n - `kunai`\n - `@apardellass/react-native-audio-stream`\n - `react-native-tvos`\n - `react-native-plugpag-wrapper`\n - `@codewars/jest-reporter`\n\n\n\n\n\n\n\n\n\n\n\n## :scroll: License\n\n[MIT][license] © [Ionică Bizău][website]\n\n\n\n\n\n\n[license]: /LICENSE\n[website]: https://ionicabizau.net\n[contributing]: /CONTRIBUTING.md\n[docs]: /DOCUMENTATION.md\n[badge_patreon]: https://ionicabizau.github.io/badges/patreon.svg\n[badge_amazon]: https://ionicabizau.github.io/badges/amazon.svg\n[badge_paypal]: https://ionicabizau.github.io/badges/paypal.svg\n[badge_paypal_donate]: https://ionicabizau.github.io/badges/paypal_donate.svg\n[patreon]: https://www.patreon.com/ionicabizau\n[amazon]: http://amzn.eu/hRo9sIZ\n[paypal-donations]: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=RVXDDLKKLQRJW\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/IonicaBizau/anser.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "types": "lib/index.d.ts",
  "version": "1.4.10"
}
