{
  "_args": [
    [
      {
        "raw": "node-stream-zip@^1.9.1",
        "scope": null,
        "escapedName": "node-stream-zip",
        "name": "node-stream-zip",
        "rawSpec": "^1.9.1",
        "spec": ">=1.9.1 <2.0.0",
        "type": "range"
      },
      "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/react-native/node_modules/@react-native-community/cli"
    ]
  ],
  "_from": "node-stream-zip@^1.9.1",
  "_hasShrinkwrap": false,
  "_id": "node-stream-zip@1.11.3",
  "_location": "/node-stream-zip",
  "_nodeVersion": "14.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-stream-zip_1.11.3_1597429204226_0.040581788905977856"
  },
  "_npmUser": {
    "name": "antelle",
    "email": "antelle.net@gmail.com"
  },
  "_npmVersion": "6.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-stream-zip@^1.9.1",
    "scope": null,
    "escapedName": "node-stream-zip",
    "name": "node-stream-zip",
    "rawSpec": "^1.9.1",
    "spec": ">=1.9.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-native/@react-native-community/cli"
  ],
  "_resolved": "https://registry.npmjs.org/node-stream-zip/-/node-stream-zip-1.11.3.tgz",
  "_shasum": "223892620b4889bce9782b256a76682631c507be",
  "_shrinkwrap": null,
  "_spec": "node-stream-zip@^1.9.1",
  "_where": "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/react-native/node_modules/@react-native-community/cli",
  "author": {
    "name": "Antelle",
    "email": "antelle.net@gmail.com",
    "url": "https://github.com/antelle"
  },
  "bugs": {
    "url": "https://github.com/antelle/node-stream-zip/issues",
    "email": "antelle.net@gmail.com"
  },
  "dependencies": {},
  "description": "node.js library for reading and extraction of ZIP archives",
  "devDependencies": {
    "nodeunit": "^0.11.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-GY+9LxkQuIT3O7K8BTdHVGKFcBYBy2vAVcTBtkKpu+OlBef/NSb6VuIWSyLiVDfmLMkggHeRJZN0F3W0GWU/uw==",
    "shasum": "223892620b4889bce9782b256a76682631c507be",
    "tarball": "https://registry.npmjs.org/node-stream-zip/-/node-stream-zip-1.11.3.tgz",
    "fileCount": 5,
    "unpackedSize": 46665,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfNtXUCRA9TVsSAnZWagAA5AwP/ieTbKuWBpzVSPBe0TMN\nnGe22XdzIXmstTuch1t08HXdiH9rcCmBXyatIwntq674629/a00RXkwUYjtZ\nr05rCPRyQnkhuX63Z97eHE2RFNvTLtSIRhB60gdwpUZ4DWbj641yKHxeMVYu\nD99PRCD9Rfn4vBJQtQru7flQlx9gxdY7u2Rqv2mOjHE1oybyLm/RYTTL0fNv\nAcoU9jNqjjlHfJOtbJQCRhRlSTul1R4CJmes/NC11dbK1qzaYqQkpKBKVO92\nR/bPj1dZkxn7jbrJxbkilf8FLEGhS9g0tQYoaxWm536GyZFE3bNZlcyTq0sa\npsky7EFaMjNSDmR+2G+vvvXFS565AeytLsA5W6RZtfxrmJ2+aGHH/t8JNMx1\nTl3K3bwFfGhukLlMLEJAaO4aRAN62l8PNpGaggogGe0Sa2itcdNKuThujj6H\nNBD5vUGM1fALmLQlfv2giLV9ii/01/EZe9A066cseCL5oqro3N3WoFXcd9TX\ntjE0edgBty8xQ2O2sDN2k5k+HvoQ2zxrBPySMkrhXpOpbGAS9RhCTR0X6G8R\nT/pQC9lf+l29liW4jpUxdqrpiSIo+7XQGHQ/HfZfmniYU8lAVmV+y+Dr7H/2\nCyroBbF97i7v47fQKx66eOe/MjE7moGd6Pj/28KB3JztLucJ8o7Y7EcHF0gv\n+NRl\r\n=ihGx\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "LICENSE",
    "node_stream_zip.js",
    "node_stream_zip.d.ts"
  ],
  "gitHead": "4824b70217848c3a101e4da608c330e37fbfb953",
  "homepage": "https://github.com/antelle/node-stream-zip",
  "keywords": [
    "zip",
    "archive",
    "unzip",
    "stream"
  ],
  "license": "MIT",
  "main": "node_stream_zip.js",
  "maintainers": [
    {
      "name": "antelle",
      "email": "antelle.net@gmail.com"
    }
  ],
  "name": "node-stream-zip",
  "optionalDependencies": {},
  "readme": "# node-stream-zip [![Build status](https://travis-ci.org/antelle/node-stream-zip.svg?branch=master)](https://travis-ci.org/antelle/node-stream-zip)\n\nnode.js library for reading and extraction of ZIP archives.  \nFeatures:\n\n- it never loads entire archive into memory, everything is read by chunks\n- large archives support\n- all operations are non-blocking, no sync i/o\n- fast initialization\n- no dependencies, no binary addons\n- decompression with built-in zlib module\n- deflate, sfx, macosx/windows built-in archives\n- ZIP64 support\n\n# Installation\n\n`$ npm install node-stream-zip`\n\n# Usage\n\nOpen a zip file\n```javascript\nconst StreamZip = require('node-stream-zip');\nconst zip = new StreamZip({\n    file: 'archive.zip',\n    storeEntries: true\n});\n\n// Handle errors\nzip.on('error', err => { /*...*/ });\n```\n\nList entries\n```javascript\nzip.on('ready', () => {\n    console.log('Entries read: ' + zip.entriesCount);\n    for (const entry of Object.values(zip.entries())) {\n        const desc = entry.isDirectory ? 'directory' : `${entry.size} bytes`;\n        console.log(`Entry ${entry.name}: ${desc}`);\n    }\n    // Do not forget to close the file once you're done\n    zip.close()\n});\n```\n\nStream one entry to stdout\n```javascript\nzip.on('ready', () => {\n    zip.stream('path/inside/zip.txt', (err, stm) => {\n        stm.pipe(process.stdout);\n        stm.on('end', () => zip.close());\n    });\n});\n```\n\nExtract one file to disk\n```javascript\nzip.on('ready', () => {\n    zip.extract('path/inside/zip.txt', './extracted.txt', err => {\n        console.log(err ? 'Extract error' : 'Extracted');\n        zip.close();\n    });\n});\n```\n\nExtract a folder from archive to disk\n```javascript\nzip.on('ready', () => {\n    fs.mkdirSync('extracted');\n    zip.extract('path/inside/zip/', './extracted', err => {\n        console.log(err ? 'Extract error' : 'Extracted');\n        zip.close();\n    });\n});\n```\n\nExtract everything\n```javascript\nzip.on('ready', () => {\n    fs.mkdirSync('extracted');\n    zip.extract(null, './extracted', (err, count) => {\n        console.log(err ? 'Extract error' : `Extracted ${count} entries`);\n        zip.close();\n    });\n});\n```\n\nRead a file as buffer in sync way\n```javascript\nzip.on('ready', () => {\n    const data = zip.entryDataSync('path/inside/zip.txt');\n    zip.close();\n});\n```\n\nWhen extracting a folder, you can listen to `extract` event\n```javascript\nzip.on('extract', (entry, file) => {\n    console.log(`Extracted ${entry.name} to ${file}`);\n});\n```\n\n`entry` event is generated for every entry during loading\n```javascript\nzip.on('entry', entry => {\n    // you can already stream this entry,\n    // without waiting until all entry descriptions are read (suitable for very large archives)\n    console.log(`Read entry ${entry.name}`);\n});\n```\n\n# Options\n\nYou can pass these options to the constructor\n- `storeEntries: true` - you will be able to work with entries inside zip archive, otherwise the only way to access them is `entry` event\n- `skipEntryNameValidation: true` - by default, entry name is checked for malicious characters, like `../` or `c:\\123`, pass this flag to disable validation errors\n\n# Methods\n\n- `zip.entries()` - get all entries description\n- `zip.entry(name)` - get entry description by name\n- `zip.stream(entry, function(err, stm) { })` - get entry data reader stream\n- `zip.entryDataSync(entry)` - get entry data in sync way\n- `zip.close()` - cleanup after all entries have been read, streamed, extracted, and you don't need the archive\n\n# Building\n\nThe project doesn't require building. To run unit tests with [nodeunit](https://github.com/caolan/nodeunit):  \n`$ npm test`\n\n# Known issues\n\n- [utf8](https://github.com/rubyzip/rubyzip/wiki/Files-with-non-ascii-filenames) file names\n- AES encrypted files\n\n# Contributors\n\nZIP parsing code has been partially forked from [cthackers/adm-zip](https://github.com/cthackers/adm-zip) (MIT license).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/antelle/node-stream-zip.git"
  },
  "scripts": {
    "test": "nodeunit test/tests.js"
  },
  "types": "node_stream_zip.d.ts",
  "version": "1.11.3"
}
