{
  "_args": [
    [
      {
        "raw": "iconv-lite@^0.6.2",
        "scope": null,
        "escapedName": "iconv-lite",
        "name": "iconv-lite",
        "rawSpec": "^0.6.2",
        "spec": ">=0.6.2 <0.7.0",
        "type": "range"
      },
      "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/encoding"
    ]
  ],
  "_from": "iconv-lite@^0.6.2",
  "_hasShrinkwrap": false,
  "_id": "iconv-lite@0.6.2",
  "_location": "/encoding/iconv-lite",
  "_nodeVersion": "12.18.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/iconv-lite_0.6.2_1594185895956_0.9242056530346248"
  },
  "_npmUser": {
    "name": "ashtuchkin",
    "email": "ashtuchkin@gmail.com"
  },
  "_npmVersion": "6.14.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "iconv-lite@^0.6.2",
    "scope": null,
    "escapedName": "iconv-lite",
    "name": "iconv-lite",
    "rawSpec": "^0.6.2",
    "spec": ">=0.6.2 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/encoding"
  ],
  "_resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.2.tgz",
  "_shasum": "ce13d1875b0c3a674bd6a04b7f76b01b1b6ded01",
  "_shrinkwrap": null,
  "_spec": "iconv-lite@^0.6.2",
  "_where": "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/encoding",
  "author": {
    "name": "Alexander Shtuchkin",
    "email": "ashtuchkin@gmail.com"
  },
  "browser": {
    "stream": false
  },
  "bugs": {
    "url": "https://github.com/ashtuchkin/iconv-lite/issues"
  },
  "dependencies": {
    "safer-buffer": ">= 2.1.2 < 3.0.0"
  },
  "description": "Convert character encodings in pure javascript.",
  "devDependencies": {
    "async": "^3.2.0",
    "c8": "^7.2.0",
    "errto": "^0.2.1",
    "iconv": "^2.3.5",
    "mocha": "^3.5.3",
    "request": "^2.88.2",
    "semver": "^6.3.0",
    "unorm": "^1.6.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-2y91h5OpQlolefMPmUlivelittSWy0rP+oYVpn6A7GwVHNE8AWzoYOBNmlwks3LobaJxgHCYZAnyNo2GgpNRNQ==",
    "shasum": "ce13d1875b0c3a674bd6a04b7f76b01b1b6ded01",
    "tarball": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.2.tgz",
    "fileCount": 27,
    "unpackedSize": 343859,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfBVioCRA9TVsSAnZWagAAK6sP/38nCaBRUQBf/hTRnE//\nf9cbc4OejIUesT2GajDLq2uIUL56BtN0kIe4J7r6bFjZEQGDUk9ryW23X1fn\nI8end6WxmMiWXzNiHqAh8v/B2MBpFRIeTyT4Ycl1w3AXesQsEHNpox9PVKF3\nQKgQEq9t8wyjY9lWg7cWaujdQgol5KVBA2YSyg0drqnjKag5F1rs+hSk868F\ncVaeVrbjX3Dvm/o905P1V8XQpARkDobfudzw/K+hVcRMwc6q4RyFl3Y19Gum\nnP2QbSzVGp8hbABPbWulfkixP6bWbKZ1F5BVakfzLZi1kkbuhA9D5ZgmBnBK\nq+mXoRZAZOjzXtA7cRbCZVtpzs2a74AVhl3Vvqrjo11xiC97tCgnAsUNTUOe\nmgltYFqf5ZrgdXQGCtq3ES8miyTYjFz/TzoUNMSOdCDVrDxkMzdggiMpPPpW\ntan7niWeEpcNDjLZHrqs3b5Ykyd8pJQT19/XtGdMcTfh1NC1+Zf0OS9GIXSN\nGXhDeqb4EGRiNLjlXXoVBSmUlXSgQc3PpeuQlmR2FrZj/20vDhy2rbmwTPny\nhVpBEwhV1LwrI5BF1AxvJeyxesDAsEfRGceg5HKcGLl6n13keh/CwFLzVWh4\naFrTmePS/ccu1n0fSNDo169bCIQTmx1MKBFS1uB1zmx3vomQHFIQTS0RzVrL\n6gMU\r\n=S6N7\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "efbad0a92edf1b09c111278abb104d935c6c0482",
  "homepage": "https://github.com/ashtuchkin/iconv-lite",
  "keywords": [
    "iconv",
    "convert",
    "charset",
    "icu"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "ashtuchkin",
      "email": "ashtuchkin@gmail.com"
    }
  ],
  "name": "iconv-lite",
  "optionalDependencies": {},
  "readme": "## iconv-lite: Pure JS character encoding conversion\n\n * No need for native code compilation. Quick to install, works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n * Used in popular projects like [Express.js (body_parser)](https://github.com/expressjs/body-parser), \n   [Grunt](http://gruntjs.com/), [Nodemailer](http://www.nodemailer.com/), [Yeoman](http://yeoman.io/) and others.\n * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n * Intuitive encode/decode API, including Streaming support.\n * In-browser usage via [browserify](https://github.com/substack/node-browserify) or [webpack](https://webpack.js.org/) (~180kb gzip compressed with Buffer shim included).\n * Typescript [type definition file](https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts) included.\n * React Native is supported (need to install `stream` module to enable Streaming API).\n * License: MIT.\n\n[![NPM Stats](https://nodei.co/npm/iconv-lite.png)](https://npmjs.org/package/iconv-lite/)  \n[![Build Status](https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master)](https://travis-ci.org/ashtuchkin/iconv-lite)\n[![npm](https://img.shields.io/npm/v/iconv-lite.svg)](https://npmjs.org/package/iconv-lite/)\n[![npm downloads](https://img.shields.io/npm/dm/iconv-lite.svg)](https://npmjs.org/package/iconv-lite/)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/iconv-lite.svg)](https://npmjs.org/package/iconv-lite/)\n\n## Usage\n### Basic API\n```javascript\nvar iconv = require('iconv-lite');\n\n// Convert from an encoded buffer to a js string.\nstr = iconv.decode(Buffer.from([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');\n\n// Convert from a js string to an encoded buffer.\nbuf = iconv.encode(\"Sample input string\", 'win1251');\n\n// Check if encoding is supported\niconv.encodingExists(\"us-ascii\")\n```\n\n### Streaming API\n```javascript\n\n// Decode stream (from binary data stream to js strings)\nhttp.createServer(function(req, res) {\n    var converterStream = iconv.decodeStream('win1251');\n    req.pipe(converterStream);\n\n    converterStream.on('data', function(str) {\n        console.log(str); // Do something with decoded strings, chunk-by-chunk.\n    });\n});\n\n// Convert encoding streaming example\nfs.createReadStream('file-in-win1251.txt')\n    .pipe(iconv.decodeStream('win1251'))\n    .pipe(iconv.encodeStream('ucs2'))\n    .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n\n// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\nhttp.createServer(function(req, res) {\n    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n        assert(typeof body == 'string');\n        console.log(body); // full request body string\n    });\n});\n```\n\n## Supported encodings\n\n *  All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex.\n *  Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap, utf32, utf32-le, and utf32-be.\n *  All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. \n    Aliases like 'latin1', 'us-ascii' also supported.\n *  All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.\n\nSee [all supported encodings on wiki](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).\n\nMost singlebyte encodings are generated automatically from [node-iconv](https://github.com/bnoordhuis/node-iconv). Thank you Ben Noordhuis and libiconv authors!\n\nMultibyte encodings are generated from [Unicode.org mappings](http://www.unicode.org/Public/MAPPINGS/) and [WHATWG Encoding Standard mappings](http://encoding.spec.whatwg.org/). Thank you, respective authors!\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@2.1.4   iconv-lite@0.4.7\n    ----------------------------------------------------------\n    encode('win1251')     ~96 Mb/s      ~320 Mb/s\n    decode('win1251')     ~95 Mb/s      ~246 Mb/s\n\n## BOM handling\n\n * Decoding: BOM is stripped by default, unless overridden by passing `stripBOM: false` in options\n   (f.ex. `iconv.decode(buf, enc, {stripBOM: false})`).\n   A callback might also be given as a `stripBOM` parameter - it'll be called if BOM character was actually found.\n * If you want to detect UTF-8 BOM when decoding other encodings, use [node-autodetect-decoder-stream](https://github.com/danielgindi/node-autodetect-decoder-stream) module.\n * Encoding: No BOM added, unless overridden by `addBOM: true` option.\n\n## UTF-16 Encodings\n\nThis library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be\nsmart about endianness in the following ways:\n * Decoding: uses BOM and 'spaces heuristic' to determine input endianness. Default is UTF-16LE, but can be \n   overridden with `defaultEncoding: 'utf-16be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-16LE and writes BOM by default. Use `addBOM: false` to override.\n\n## UTF-32 Encodings\n\nThis library supports UTF-32LE, UTF-32BE and UTF-32 encodings. Like the UTF-16 encoding above, UTF-32 defaults to UTF-32LE, but uses BOM and 'spaces heuristics' to determine input endianness. \n * The default of UTF-32LE can be overridden with the `defaultEncoding: 'utf-32be'` option. Strips BOM unless `stripBOM: false`.\n * Encoding: uses UTF-32LE and writes BOM by default. Use `addBOM: false` to override. (`defaultEncoding: 'utf-32be'` can also be used here to change encoding.)\n\n## Other notes\n\nWhen decoding, be sure to supply a Buffer to decode() method, otherwise [bad things usually happen](https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding).  \nUntranslatable characters are set to ï¿½ or ?. No transliteration is currently supported.  \nNode versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65, #77).  \n\n## Testing\n\n```bash\n$ git clone git@github.com:ashtuchkin/iconv-lite.git\n$ cd iconv-lite\n$ npm install\n$ npm test\n    \n$ # To view performance:\n$ node test/performance.js\n\n$ # To view test coverage:\n$ npm run coverage\n$ open coverage/lcov-report/index.html\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ashtuchkin/iconv-lite.git"
  },
  "scripts": {
    "coverage": "c8 _mocha --grep .",
    "test": "mocha --reporter spec --grep ."
  },
  "typings": "./lib/index.d.ts",
  "version": "0.6.2"
}
