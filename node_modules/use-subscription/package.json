{
  "_args": [
    [
      {
        "raw": "use-subscription@^1.0.0",
        "scope": null,
        "escapedName": "use-subscription",
        "name": "use-subscription",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/react-native"
    ]
  ],
  "_from": "use-subscription@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "use-subscription@1.4.1",
  "_location": "/use-subscription",
  "_nodeVersion": "10.14.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/use-subscription_1.4.1_1584647630453_0.07170166353183394"
  },
  "_npmUser": {
    "name": "acdlite",
    "email": "npm@andrewclark.io"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "use-subscription@^1.0.0",
    "scope": null,
    "escapedName": "use-subscription",
    "name": "use-subscription",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-native"
  ],
  "_resolved": "https://registry.npmjs.org/use-subscription/-/use-subscription-1.4.1.tgz",
  "_shasum": "edcbcc220f1adb2dd4fa0b2f61b6cc308e620069",
  "_shrinkwrap": null,
  "_spec": "use-subscription@^1.0.0",
  "_where": "/Users/mohammedmulla/Documents/personal-project/react-native/shopping-list/Shoppinglist/node_modules/react-native",
  "bugs": {
    "url": "https://github.com/facebook/react/issues"
  },
  "dependencies": {
    "object-assign": "^4.1.1"
  },
  "description": "Reusable hooks",
  "devDependencies": {
    "rxjs": "^5.5.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-7+IIwDG/4JICrWHL/Q/ZPK5yozEnvRm6vHImu0LKwQlmWGKeiF7mbAenLlK/cTNXrTtXHU/SFASQHzB6+oSJMQ==",
    "shasum": "edcbcc220f1adb2dd4fa0b2f61b6cc308e620069",
    "tarball": "https://registry.npmjs.org/use-subscription/-/use-subscription-1.4.1.tgz",
    "fileCount": 7,
    "unpackedSize": 13291,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJec83OCRA9TVsSAnZWagAAXScP/iYE/F9jyAXW9pnWCxR0\nNRC00bXgkY+jE4MJ9N3VhswQIobFejyF0e/wpLZAQRe6Wg9TMcILyK/+pWPO\n42bUtb8yxKwxvZDy5+UPmHmy0PLqfYAN+3VoJpbcLotDnVBZSXvmT2kARHxL\n3cKtSf5v8tVaOcH+YImvsp3AnIQ/Of7CSodjtonvh/v72grpRJFrLY2WYNmr\nBqpUWlo9w4mxgxNsc6ng8I1KrV7S5/9q/ThvQUs3k4+92jUpOi8f7+qr0z7+\nehr1tWGo562sjbr9RXg89LFfhgnjFYCU4b7FluD6rmEXoNLjlgBP5Mkh5NZF\nxEmoWR+QizyxFwDbgdPQ8AUzNGLgq/8/eIwRrTFXE+Y6CqMLQS9c94xBiUdj\nmhlOkoRNJ7RoyGanFvK8xgHUC4HUo4T3yVgwtkbVifvrTlGulHkae78HxqYe\nPD0cpkbmkTJjvg9Kx/lUEydpjfsVjY203cvPUn/cQoY5TpZBeWs+MCpGGXev\nyuPLeZii3zkQfTIZEioUjma5mRuW3HKGxQmFyesXq4wYGvrlggIYAalMrwsN\nOK90B2n23z4dxdJ6y3I2gPXsOLFynoplhoLGv0yAeibMYiVbryZv7Vt8dmWy\nWMAUtgvQV5QkqQliJzqaSn16uzM2are/pAyoIz+eMHhceaS5zY/kqh5BxGCZ\n1LY2\r\n=Mkmc\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "LICENSE",
    "README.md",
    "build-info.json",
    "index.js",
    "cjs/"
  ],
  "homepage": "https://github.com/facebook/react#readme",
  "maintainers": [
    {
      "name": "acdlite",
      "email": "npm@andrewclark.io"
    },
    {
      "name": "brianvaughn",
      "email": "briandavidvaughn@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "gaearon",
      "email": "dan.abramov@gmail.com"
    },
    {
      "name": "lunaruan",
      "email": "lunaris.ruan@gmail.com"
    },
    {
      "name": "sebmarkbage",
      "email": "sebastian@calyptus.eu"
    },
    {
      "name": "sophiebits",
      "email": "npm@sophiebits.com"
    },
    {
      "name": "threepointone",
      "email": "threepointone@gmail.com"
    },
    {
      "name": "trueadm",
      "email": "dg@domgan.com"
    }
  ],
  "name": "use-subscription",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.8.0"
  },
  "readme": "# use-subscription\n\nReact hook that safely manages subscriptions in concurrent mode.\n\nThis utility can be used for subscriptions to a single value that are typically only read in one place and may update frequently (e.g. a component that subscribes to a geolocation API to show a dot on a map).\n\n## When should you NOT use this?\n\nMost other cases have **better long-term solutions**:\n* Redux/Flux stores should use the [context API](https://reactjs.org/docs/context.html) instead.\n* I/O subscriptions (e.g. notifications) that update infrequently should use a mechanism like [`react-cache`](https://github.com/facebook/react/blob/master/packages/react-cache/README.md) instead.\n* Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced [here](https://gist.github.com/bvaughn/d569177d70b50b58bff69c3c4a5353f3)) in a way that is most optimized for their library usage.\n\n## Limitations in concurrent mode\n\n`use-subscription` is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering. This is an inherent limitation of storing state outside of React's managed state queue and rendering in response to a change event.\n\nThe effect of de-opting to sync mode is that the main thread may periodically be blocked (in the case of CPU-bound work), and placeholders may appear earlier than desired (in the case of IO-bound work).\n\nFor **full compatibility** with concurrent rendering, including both **time-slicing** and **React Suspense**, the suggested longer-term solution is to move to one of the patterns described in the previous section.\n\n## What types of subscriptions can this support?\n\nThis abstraction can handle a variety of subscription types, including:\n* Event dispatchers like `HTMLInputElement`.\n* Custom pub/sub components like Relay's `FragmentSpecResolver`.\n* Observable types like RxJS `BehaviorSubject` and `ReplaySubject`. (Types like RxJS `Subject` or `Observable` are not supported, because they provide no way to read the \"current\" value after it has been emitted.)\n\nNote that JavaScript promises are also **not supported** because they provide no way to synchronously read the \"current\" value.\n\n# Installation\n\n```sh\n# Yarn\nyarn add use-subscription\n\n# NPM\nnpm install use-subscription\n```\n\n# Usage\n\nTo configure a subscription, you must provide two methods: `getCurrentValue` and `subscribe`.\n\nIn order to avoid removing and re-adding subscriptions each time this hook is called, the parameters passed to this hook should be memoized. This can be done by wrapping the entire subscription with `useMemo()`, or by wrapping the individual callbacks with `useCallback()`.\n\n## Subscribing to event dispatchers\n\nBelow is an example showing how `use-subscription` can be used to subscribe to event dispatchers such as DOM elements.\n\n```js\nimport React, { useMemo } from \"react\";\nimport { useSubscription } from \"use-subscription\";\n\n// In this example, \"input\" is an event dispatcher (e.g. an HTMLInputElement)\n// but it could be anything that emits an event and has a readable current value.\nfunction Example({ input }) {\n\n  // Memoize to avoid removing and re-adding subscriptions each time this hook is called.\n  const subscription = useMemo(\n    () => ({\n      getCurrentValue: () => input.value,\n      subscribe: callback => {\n        input.addEventListener(\"change\", callback);\n        return () => input.removeEventListener(\"change\", callback);\n      }\n    }),\n\n    // Re-subscribe any time our input changes\n    // (e.g. we get a new HTMLInputElement prop to subscribe to)\n    [input]\n  );\n\n  // The value returned by this hook reflects the input's current value.\n  // Our component will automatically be re-rendered when that value changes.\n  const value = useSubscription(subscription);\n\n  // Your rendered output goes here ...\n}\n```\n\n## Subscribing to observables\n\nBelow are examples showing how `use-subscription` can be used to subscribe to certain types of observables (e.g. RxJS `BehaviorSubject` and `ReplaySubject`).\n\n**Note** that it is not possible to support all observable types (e.g. RxJS `Subject` or `Observable`) because some provide no way to read the \"current\" value after it has been emitted.\n\n### `BehaviorSubject`\n```js\nconst subscription = useMemo(\n  () => ({\n    getCurrentValue: () => behaviorSubject.getValue(),\n    subscribe: callback => {\n      const subscription = behaviorSubject.subscribe(callback);\n      return () => subscription.unsubscribe();\n    }\n  }),\n\n  // Re-subscribe any time the behaviorSubject changes\n  [behaviorSubject]\n);\n\nconst value = useSubscription(subscription);\n```\n\n### `ReplaySubject`\n```js\nconst subscription = useMemo(\n  () => ({\n    getCurrentValue: () => {\n      let currentValue;\n      // ReplaySubject does not have a sync data getter,\n      // So we need to temporarily subscribe to retrieve the most recent value.\n      replaySubject\n        .subscribe(value => {\n          currentValue = value;\n        })\n        .unsubscribe();\n      return currentValue;\n    },\n    subscribe: callback => {\n      const subscription = replaySubject.subscribe(callback);\n      return () => subscription.unsubscribe();\n    }\n  }),\n\n  // Re-subscribe any time the replaySubject changes\n  [replaySubject]\n);\n\nconst value = useSubscription(subscription);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/react.git",
    "directory": "packages/use-subscription"
  },
  "version": "1.4.1"
}
